#server
server:
  port: 8080
  servlet:
    context-path: /api

# Database
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/user_service
    username: root
    password: 16042002

  # A option in springboot framework is used to define Hibernate behavior in creating and updating database
  # Hibernate will create and update tables in database, corresponding to object in your app.
  # if table dont exist, Hibernate will create it. Else, Hibernate will update changes
  jpa:
    generate-ddl: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect

  lombok:
    enabled: true

  open-in-view: false

  # Validation
  mvc:
    throw-exception-if-no-handler-found: true

  data:
    # redis cache
    redis:
      host: localhost
      port: 6379

  # Config for JavaMailSender
  mail:
    from-address: ${message.email.from}
    username: ${message.email.username}
    password: ${message.email.password}
    host: ${message.email.host}
    port: ${message.email.port}
    properties:
      mail:
        protocol: ${message.email.protocol}
        smtp:
          auth: true
          starttls:
            enable: true

# Mail
message:
  email:
    protocol: smtp
    from: linhnd.b20at109@stu.ptit.edu.vn
    username: linhnd.b20at109@stu.ptit.edu.vn
    password: Sero2002@
    host: smtp-mail.outlook.com
    port: 587

# JWT
jwtToken:
  secretKey: 0123456789
  expireTime: 1800000

jwtRefreshToken:
  secretKey: 9876543210
  expireTime: 4800000

# Cloudinary
cloudinary:
  cloudName: dwlokgoam
  apiKey: 976349327572747
  apiSecret: xMr3J7-geMUqeQNpcwHTZD4Aook

tempUser:
  lifespan: 12

# Swagger: http://localhost:8080/api/swagger-ui/index.html

#user:
#  oauth:
#    clientId: javadevjournal
#    clientSecret: 1234$#@!
#    redirectUris=http: //localhost:8080/login
#    accessTokenValidity: 300
#    refreshTokenValidity: 240000
#    user:
#      username: javadevjournal
#      password: javadevjournal



